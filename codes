Transpose

#include<stdio.h>
void read(int row, int col, int a[row][col])
{
    printf("\nEnter the elements of %d x %d matrix",row, col);
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
}

void print(int row, int col, int a[row][col])
{
    printf("Matrix contains .......\n");
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            printf("%d\t",a[i][j]);
        }
        printf("\n");
    }
}

void transpose(int row, int col, int a[row][col])
{
   printf("Transpose contains .......\n");
    for (int i=0;i<col;i++)
    {
        for (int j=0;j<row;j++)
        {
            printf("%d\t",a[j][i]);
        }
        printf("\n");
    }
}

void writeListToFile(int row,int col,int a[row][col], char* filename) {
    FILE* file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    fprintf(file, "Transpose contains .......\n");
    for (int i=0;i<col;i++)
    {
        for (int j=0;j<row;j++)
        {
            fprintf(file, "%d\t", a[j][i]);
        }
        fprintf(file,"\n");
    }
    fclose(file);
}


void main()
{
    int row,col;
    printf("Enter the row of the matrix=\n");
    scanf("%d",&row);
    printf("Enter the column of the matrix=\n");
    scanf("%d",&col);
    int a[row][col];
    read(row, col, a);
    print(row,col, a);
    transpose(row,col,a);
    writeListToFile(row,col,a, "transpose.txt");
}


Multiplication

#include<stdio.h>
void read(int row, int col, int a[row][col])
{
    printf("\nEnter the elements of %d x %d matrix\n",row, col);
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
}

void print(int row, int col, int a[row][col])
{
    printf("Matrix contains .......\n");
    for (int i=0;i<row;i++)
    {
        for (int j=0;j<col;j++)
        {
            printf("%d\t",a[i][j]);
        }
        printf("\n");
    }
}

void mul(int rows1,int rows2,int cols1,int cols2, int mat1[rows1][cols1],int mat2[rows2][cols2])
{
    int rows_mul=rows1;
    int cols_mul=cols2;
    int mul[rows_mul][cols_mul];
    printf("\nMULTIPLIED MATRIX-----\n");
  for(int i=0;i<rows_mul;i++)
    {
        int j=0;
        for(j=0;j<cols_mul;j++)
        {
            mul[i][j]=0;
           for(int k=0;k<cols_mul;k++)
           {
               mul[i][j]+=mat1[i][k]*mat2[k][j];
           }
        }
    }
    print(rows_mul,cols_mul,mul);
    FILE *file= fopen("file4.txt","w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    fprintf(file, "\nThe multiplied matrix is----\n");
     for(int i=0;i<rows_mul;i++)
    {
        for(int j=0;j<cols_mul;j++)
        {
             fprintf(file, "%d\t",mul[i][j]);
        }
       fprintf(file, "\n");
    }
}

void main()
{
    int rows1,cols1,rows2,cols2;
    printf("Enter the row of the matrix 1=\n");
    scanf("%d",&rows1);
    printf("Enter the column of the matrix 1=\n");
    scanf("%d",&cols1);
    int first[rows1][cols1];
    read(rows1, cols1, first);
    print(rows1,cols1, first);
    printf("Enter the row of the matrix 2= \n");
    scanf("%d",&rows2);
    printf("Enter the column of the matrix 2= \n");
    scanf("%d",&cols2);
    int second[rows2][cols2];
    read(rows2, cols2, second);
    print(rows2,cols2, second);
    if(cols1 != rows2)
    {
        printf("\nNumber of columns of matrix 1 and rows of matrix 2 must be equal");
        getch();
        exit(0);
    }
    printf("\nMatrix can be formed\n");
    mul(rows1,rows2,cols1,cols2, first, second);
}

Longest line from file

#include<stdio.h>
#include<Stdlib.h>
#include<string.h>
void read_lines(char lines[10][100], int *num_lines) {
    char line[100];
    while (*num_lines < 10) {
        fgets(line, 100, stdin);
        if (line[0] == '\n') {
            break;
        }
        strncpy(lines[*num_lines], line, 100);
        (*num_lines)++;
    }
}
int Length(char *strings)
{
    int i;
    for(i=0;strings[i]!='\0';++i);

    return i;
}
void find_longest_line(char lines[10][100], int num_lines) {
    int longestLength = 0;
    char *longestLine = NULL;
    for (int i = 0; i < num_lines; i++) {
        int length = Length(lines[i]);
        if (length > longestLength) {
            longestLength = length;
            longestLine = lines[i];
        }
    }
    if (longestLine != NULL) {
        printf("Longest line: %s", longestLine);
    } else {
        printf("No lines read\n");
    }
}
void read_linesFromFile(char lines[10][100], int *num_lines) {
    FILE *file = fopen("input.txt", "r");
    if (file == NULL) {
        printf("Could not open file input.txt");
        return;
    }
    char line[100];
    while (*num_lines < 10 && fgets(line, 100, file) != NULL) {
        strncpy(lines[*num_lines], line, 100);
        (*num_lines)++;
    }
    fclose(file);
}
int main(){
 char lines[10][100];
    int num_lines = 0;

    // Read lines from user input
    printf("Enter up to %d lines of text, or an empty line to stop:\n", 10);
    read_lines(lines, &num_lines);
    printf("Reading from the file\n");
    read_linesFromFile(lines, &num_lines);
      find_longest_line(lines, num_lines);

}


1.	Write a C program to read  text lines  from the following interfaces

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void_read_lines(char line[10][100],int *num_lines)
{
     char lines[100];
    while (*num_lines < 10)
        {
        fgets(line, 100, stdin);
        if (line[0] == '\n')
         {
            break;
        }
        strncpy(lines[*num_lines], line, 100);
        (*num_lines)++;
    }
}
int length(char*strings)
{
    int i;
    for(i=0;strings[i]=0;i++);
    return i;

}
void find_longest_line(char lines[10][100],int num_lines)
{
    int longestlength =0;
   char *longestline =NULL;
    for(int i=0;i<num-lines;i++)
    {
        int length=length(lines[i]);
        if(length > longestlength)
        {
            longestlength=length;
            longestline=line[i];\*/-+      }
    }
    if (longestline =! NULL)
    {
        printf("longest line %s", longestline);

    }
    else
    {
        printf("no lines read\n");
    }
}
int main()
{
    char lines [10][100];
    int num_lines=0;
    printf("%d \n",10);
    read_line(lines,&num_lines);
    find_longest_line(lines,num_lines);
}


2.	Re-wite the above program to find a pattern of letters in the set lines read from 
a.	User input (maximum 10 lines to be read)
b.	Files

#include<stdio.h>
#include<Stdlib.h>
#include<string.h>
void read_lines(char lines[10][100], int *num_lines) {
    char line[100];
    while (*num_lines < 10) {
        fgets(line, 100, stdin);
        if (line[0] == '\n') {
            break;
        }
        strncpy(lines[*num_lines], line, 100);
        (*num_lines)++;
    }
}
int Length(char *strings)
{
    int i;
    for(i=0;strings[i]!='\0';++i);

    return i;
}
void find_longest_line(char lines[10][100], int num_lines) {
    int longestLength = 0;
    char *longestLine = NULL;
    for (int i = 0; i < num_lines; i++) {
        int length = Length(lines[i]);
        if (length > longestLength) {
            longestLength = length;
            longestLine = lines[i];
        }
    }
    if (longestLine != NULL) {
        printf("Longest line: %s", longestLine);
    } else {
        printf("No lines read\n");
    }
}
void read_linesFromFile(char lines[10][100], int *num_lines) {
    FILE *file = fopen("input.txt", "r");
    if (file == NULL) {
        printf("Could not open file input.txt");
        return;
    }
    char line[100];
    while (*num_lines < 10 && fgets(line, 100, file) != NULL) {
        strncpy(lines[*num_lines], line, 100);
        (*num_lines)++;
    }
    fclose(file);
}
int main(){
 char lines[10][100];
    int num_lines = 0;

    // Read lines from user input
    printf("Enter up to %d lines of text, or an empty line to stop:\n", 10);
    read_lines(lines, &num_lines);
    printf("Reading from the file\n");
    read_linesFromFile(lines, &num_lines);
      find_longest_line(lines, num_lines);

}

-------

#include<stdio.h>
void read(int *,int);
void display(int *,int);
void bubble_sort(int a[],int);
int main()
{
    int a[100], *p; p=a; int i,n;
    printf("Enter the array size= ");
    scanf("%d",&n);
    read(p,n);
    display(p,n);
    bubble_sort(a,n);
    display(p,n);
    return 0;
}

void read(int *p,int n)
{
    int i;
    printf("\nEnter the %d array elements\n",n);
    for(i=0;i<n;i++)
    {
        scanf("%d",p);
        p++;
    }
}

void display(int *p,int n)
{
    int i;
    printf("\nThe array elements are= \n");
    for(i=0;i<n;i++)
    {
        printf("\nArr[%d]=%d",i,*p);
        p++;
    }
}

void bubble_sort(int a[100],int n)
{
    int i=0,j=0,temp;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-i-1;j++)
      {
        if(a[j]>=a[j+1])
        {
            temp=a[j];
            a[j]=a[j+1];
            a[j+1]=temp;
        }
      }
    }
}


Bubble sort

// C program for implementation of Bubble sort
#include <stdio.h>

void swap(int* xp, int* yp)
{
	int temp = *xp;
	*xp = *yp;
	*yp = temp;
}

// A function to implement bubble sort
void bubbleSort(int arr[], int n)
{
	int i, j;
	for (i = 0; i < n - 1; i++)

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
			if (arr[j] > arr[j + 1])
				swap(&arr[j], &arr[j + 1]);
}

/* Function to print an array */
void printArray(int arr[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

Multiplication of two matrix

// Driver program to test above functions
int main()
{
	int arr[] = { 5, 1, 4, 2, 8 };
	int n = sizeof(arr) / sizeof(arr[0]);
	bubbleSort(arr, n);
	printf("Sorted array: \n");
	printArray(arr, n);
	return 0;
}

#include <stdio.h>
#include <stdlib.h>


#define R1 2
#define C1 2
#define R2 2
#define C2 2

void mulMat(int mat1[][C1], int mat2[][C2])
{
    int rslt[R1][C2],i,j,k;

    printf("Multiplication of given two matrices is:\n");

    for ( i = 0; i < R1; i++)
        {
        for ( j = 0; j < C2; j++)
        {
            rslt[i][j] = 0;

            for ( k = 0; k < R2; k++)
                {
                rslt[i][j] += mat1[i][k] * mat2[k][j];
            }

            printf("%d\t", rslt[i][j]);
        }

        printf("\n");
    }
}

// Driver code
int main()
{

    int mat1[R1][C1] = { { 1, 1 },
                         { 2, 2 } };

    int mat2[R2][C2] = { { 1, 1 },
                         { 2, 2 } };


    if (C1 != R2) {
        printf("The number of columns in Matrix-1  must be "
               "equal to the number of rows in "
               "Matrix-2\n");
        printf("Please update MACROs value according to "
               "your array dimension in "
               "#define section\n");

        exit(EXIT_FAILURE);
    }

    mulMat(mat1, mat2);

    return 0;
}

bubble using linked list

#include<stdio.h>
#include<stdlib.h>

struct Node
{
	int data;
	struct Node *next;
};
void insertAtTheBegin(struct Node **start_ref, int data);
void bubbleSort(struct Node *start);
void swap(struct Node *a, struct Node *b);
void printList(struct Node *start);

int main()
{
	int arr[] = {12, 56, 2, 11, 1, 90};
	int list_size, i;
	struct Node *start = NULL;
	for (i = 0; i< 6; i++)
		insertAtTheBegin(&start, arr[i]);
	printf("\n Linked list before sorting ");
	printList(start);
	bubbleSort(start);

	printf("\n Linked list after sorting ");
	printList(start);

	getchar();
	return 0;
}
void insertAtTheBegin(struct Node **start_ref, int data)
{
	struct Node *ptr1 = (struct Node*)malloc(sizeof(struct Node));
	ptr1->data = data;
	ptr1->next = *start_ref;
	*start_ref = ptr1;
}
void printList(struct Node *start)
{
	struct Node *temp = start;
	printf("\n");
	while (temp!=NULL)
	{
		printf("%d ", temp->data);
		temp = temp->next;
	}
}
void bubbleSort(struct Node *start)
{
	int swapped, i;
	struct Node *ptr1;
	struct Node *lptr = NULL;

	if (start == NULL)
		return;

	do
	{
		swapped = 0;
		ptr1 = start;

		while (ptr1->next != lptr)
		{
			if (ptr1->data > ptr1->next->data)
			{
				swap(ptr1, ptr1->next);
				swapped = 1;
			}
			ptr1 = ptr1->next;
		}
		lptr = ptr1;                    
	}
	while (swapped);
}
void swap(struct Node *a, struct Node *b)
{
	int temp = a->data;
	a->data = b->data;
	b->data = temp;
}


Merged linked list

#include <stdio.h>
#include <stdlib.h>

struct Node
{
	int data;
	struct Node* next;
};
struct Node* SortedMerge(struct Node* a,
						struct Node* b);
void FrontBackSplit(struct Node* source,
					struct Node** frontRef,
					struct Node** backRef);

void MergeSort(struct Node** headRef)
{
	struct Node* head = *headRef;
	struct Node* a;
	struct Node* b;

	if ((head == NULL) ||
		(head->next == NULL))
	{
		return;
	}
	FrontBackSplit(head, &a, &b);

	MergeSort(&a);
	MergeSort(&b);

	*headRef = SortedMerge(a, b);
}

struct Node* SortedMerge(struct Node* a,
						struct Node* b)
{
	struct Node* result = NULL;

	if (a == NULL)
		return (b);
	else if (b == NULL)
		return (a);

	if (a->data <= b->data)
	{
		result = a;
		result->next =
				SortedMerge(a->next, b);
	}
	else
	{
		result = b;
		result->next = SortedMerge(a, b->next);
	}
	return (result);
}

void FrontBackSplit(struct Node* source,
					struct Node** frontRef,
					struct Node** backRef)
{
	struct Node* fast;
	struct Node* slow;
	slow = source;
	fast = source->next;

	while (fast != NULL)
	{
		fast = fast->next;
		if (fast != NULL)
		{
			slow = slow->next;
			fast = fast->next;
		}
	}

	*frontRef = source;
	*backRef = slow->next;
	slow->next = NULL;
}
void printList(struct Node* node)
{
	while (node != NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
}
void push(struct Node** head_ref,
		int new_data)
{
	struct Node* new_node =
		(struct Node*)malloc(sizeof(struct Node));

	new_node->data = new_data;

	new_node->next = (*head_ref);

	(*head_ref) = new_node;
}
int main()
{
	struct Node* res = NULL;
	struct Node* a = NULL;

	push(&a, 15);
	push(&a, 10);
	push(&a, 5);
	push(&a, 20);
	push(&a, 3);
	push(&a, 2);

	MergeSort(&a);

	printf("Sorted Linked List is: \n");
	printList(a);

	getchar();
	return 0;
}

Stack

#include <stdio.h>

#include <stdlib.h>

#define SIZE 4

int top = -1, inp_array[SIZE];
void push();
void pop();
void show();

int main()
{
    int choice;

    while (1)
    {
        printf("\nPerform operations on the stack:");
        printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.End");
        printf("\n\nEnter the choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            push();
            break;
        case 2:
            pop();
            break;
        case 3:
            show();
            break;
        case 4:
            exit(0);

        default:
            printf("\nInvalid choice!!");
        }
    }
}

void push()
{
    int x;

    if (top == SIZE - 1)
    {
        printf("\nOverflow!!");
    }
    else
    {
        printf("\nEnter the element to be added onto the stack: ");
        scanf("%d", &x);
        top = top + 1;
        inp_array[top] = x;
    }
}

void pop()
{
    if (top == -1)
    {
        printf("\nUnderflow!!");
    }
    else
    {
        printf("\nPopped element: %d", inp_array[top]);
        top = top - 1;
    }
}

void show()
{
    int i;
    if(top == -1)
    {
        printf("\nUnderflow!!");
    }
    else
    {
        printf("\nElements present in the stack: \n");
        for (i = top; i >= 0; --i)
            printf("%d\n", inp_array[i]);
    }
}
Original nuumber with stack



#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define MAX_QUEUE_SIZE 100

int queue[MAX_QUEUE_SIZE];
int front = 0, rear = -1;

void push(int number)
{
    if (rear == MAX_QUEUE_SIZE - 1)
    {
        printf("Queue overflow! Cannot push %d.\n", number);
    } else
    {
        queue[++rear] = number;
        printf("Pushed %d into the queue.\n", number);
    }
}

void pop()
{
    if (front > rear)
    {
        printf("Queue is empty. Cannot pop.\n");
    } else
    {
        int number = queue[front++];
        printf("Popped %d from the queue.\n", number);
    }
}

void pick()
{
    if (front > rear)
    {
        printf("Queue is empty. Cannot pick.\n");
    } else
    {
        int index = rand() % (rear - front + 1) + front;
        int number = queue[index];
        printf("Picked %d from the queue at index %d.\n", number, index);
    }
}

int main()
{
    srand(time(0)); // Initialize random seed
     int i,j;
    // Randomly generate numbers and perform queue operations
    for (i = 0; i < 10; i++)
        {
        int command = rand() % 3;

        if (command == 0)
        {
            int number = rand() % 100 + 1;
            push(number);
        } else if (command == 1)
        {
            pop();
        } else if (command == 2)
        {
            pick();
        }

        printf("Queue: ");
        for (j = front; j <= rear; j++)
        {
            printf("%d ", queue[j]);
        }
        printf("\n\n");
    }

    return 0;
}

Pre,Post,Inorder
#include<stdlib.h>
#include<stdio.h>

struct bin_tree {
int data;
struct bin_tree * right, * left;
};
typedef struct bin_tree node;

void insert(node ** tree, int val)
{
    node *temp = NULL;
    if(!(*tree))
    {
        temp = (node *)malloc(sizeof(node));
        temp->left = temp->right = NULL;
        temp->data = val;
        *tree = temp;
        return;
    }

    if(val < (*tree)->data)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    {
        insert(&(*tree)->right, val);
    }

}

void print_preorder(node * tree)
{
    if (tree)
    {
        printf("%d\n",tree->data);
        print_preorder(tree->left);
        print_preorder(tree->right);
    }

}

void print_inorder(node * tree)
{
    if (tree)
    {
        print_inorder(tree->left);
        printf("%d\n",tree->data);
        print_inorder(tree->right);
    }
}

void print_postorder(node * tree)
{
    if (tree)
    {
        print_postorder(tree->left);
        print_postorder(tree->right);
        printf("%d\n",tree->data);
    }
}

void deltree(node * tree)
{
    if (tree)
    {
        deltree(tree->left);
        deltree(tree->right);
        free(tree);
    }
}

node* search(node ** tree, int val)
{
    if(!(*tree))
    {
        return NULL;
    }

    if(val < (*tree)->data)
    {
        search(&((*tree)->left), val);
    }
    else if(val > (*tree)->data)
    {
        search(&((*tree)->right), val);
    }
    else if(val == (*tree)->data)
    {
        return *tree;
    }
}

void main()
{
    node *root;
    node *tmp;
    //int i;

    root = NULL;
    /* Inserting nodes into tree */
    insert(&root, 9);
    insert(&root, 4);
    insert(&root, 15);
    insert(&root, 6);
    insert(&root, 12);
    insert(&root, 17);
    insert(&root, 2);

    /* Printing nodes of tree */
    printf("Pre Order Display\n");
    print_preorder(root);

    printf("In Order Display\n");
    print_inorder(root);

    printf("Post Order Display\n");
    print_postorder(root);

    /* Search node into tree */
    tmp = search(&root, 4);
    if (tmp)
    {
        printf("Searched node=%d\n", tmp->data);
    }
    else
    {
        printf("Data Not found in tree.\n");
    }

    /* Deleting all nodes of tree */
    deltree(root);
}
 Binary tree insert and display

#include<stdio.h>
#include<stdlib.h>
/* A binary tree node has data, pointer to left child
and a pointer to right child */
struct Node
{
  int data;
  struct Node *left;
  struct Node *right;
};
struct Node *newNode (int data)
{
  struct Node *Node = (struct Node *) malloc (sizeof (struct Node));
  Node->data = data;
  Node->left = NULL;
  Node->right = NULL;

  return (Node);
};

void printCurrentLevel (struct Node *root, int level);
int height (struct Node *node);

int height (struct Node *node)
{
  if (node == NULL)
    return 0;
  else
    {
/* compute the height of each subtree */
      int lheight = height (node->left);
      int rheight = height (node->right);

/* use the larger one */
      if (lheight > rheight)
	return (lheight + 1);
      else
	return (rheight + 1);
    }
}

void printLevelOrder (struct Node *root)
{
  int h = height (root);
  int i;
  for (i = 1; i <= h; i++)
    printCurrentLevel (root, i);
}				/* Print nodes at a current level */

void printCurrentLevel (struct Node *root, int level)
{
  if (root == NULL)
    return;
  if (level == 1)
    printf ("%d ", root->data);
  else if (level > 1)
    {
      printCurrentLevel (root->left, level - 1);
      printCurrentLevel (root->right, level - 1);
    }
    }

struct Node *insert (struct Node *root, int val)
{

  if (root == NULL)
    return newNode (val);

  if (root->data < val)
    root->right = insert (root->right, val);

  else if (root->data > val)
    root->left = insert (root->left, val);

  return root;
}

// Driver code
int main ()
{
  struct Node *root = newNode (10);
  root->left = newNode (11);
  root->left->left = newNode (7);
  root->right = newNode (9);
  root->right->left = newNode (15);
  root->right->right = newNode (8);

  printf ("Level order traversal before insertion: ");
  printLevelOrder (root);
  printf ("\n");

  int key = 12;
  root = insert (root, key);

  printf ("Level order traversal after insertion: ");
  printLevelOrder (root);
  printf ("\n");

  return 0;
}
